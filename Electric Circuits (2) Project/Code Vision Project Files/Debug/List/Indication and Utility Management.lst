
AVRASM ver. 2.1.30  C:\Users\Mahmo\OneDrive\Desktop\Electric Circuits (2) Project\Code Vision Project Files\Debug\List\Indication and Utility Management.asm Wed Jan 06 09:56:53 2021

C:\Users\Mahmo\OneDrive\Desktop\Electric Circuits (2) Project\Code Vision Project Files\Debug\List\Indication and Utility Management.asm(1083): warning: Register r5 already defined by the .DEF directive
C:\Users\Mahmo\OneDrive\Desktop\Electric Circuits (2) Project\Code Vision Project Files\Debug\List\Indication and Utility Management.asm(1084): warning: Register r4 already defined by the .DEF directive
C:\Users\Mahmo\OneDrive\Desktop\Electric Circuits (2) Project\Code Vision Project Files\Debug\List\Indication and Utility Management.asm(1085): warning: Register r7 already defined by the .DEF directive
C:\Users\Mahmo\OneDrive\Desktop\Electric Circuits (2) Project\Code Vision Project Files\Debug\List\Indication and Utility Management.asm(1086): warning: Register r6 already defined by the .DEF directive
C:\Users\Mahmo\OneDrive\Desktop\Electric Circuits (2) Project\Code Vision Project Files\Debug\List\Indication and Utility Management.asm(1087): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.42 Evaluation
                 ;(C) Copyright 1998-2020 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 4.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Speed
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _sec=R5
                 	.DEF _mins=R4
                 	.DEF _hrs=R7
                 	.DEF _temperature=R6
                 	.DEF _studentNumber=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0052 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 00fd 	JMP  _studentEntering
000006 940c 0000 	JMP  0x00
000008 940c 0108 	JMP  _t2_ovf_int
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 00f2 	JMP  _studentLeaving
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G102:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G102:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
000035 0000      	.DB  0x0,0x0
                 
                 _0x0:
000036 7525
000037 253a
000038 3a75
000039 7525      	.DB  0x25,0x75,0x3A,0x25,0x75,0x3A,0x25,0x75
00003a 2500
00003b 2b75
00003c 312d
00003d 0043      	.DB  0x0,0x25,0x75,0x2B,0x2D,0x31,0x43,0x0
00003e 5546
00003f 4c4c
C:\Users\Mahmo\OneDrive\Desktop\Electric Circuits (2) Project\Code Vision Project Files\Debug\List\Indication and Utility Management.asm(1132): warning: .cseg .db misalignment - padding zero byte
000040 0000      	.DB  0x46,0x55,0x4C,0x4C,0x0
                 _0x2000003:
000041 c080      	.DB  0x80,0xC0
                 _0x2060060:
C:\Users\Mahmo\OneDrive\Desktop\Electric Circuits (2) Project\Code Vision Project Files\Debug\List\Indication and Utility Management.asm(1136): warning: .cseg .db misalignment - padding zero byte
000042 0001      	.DB  0x1
                 _0x2060000:
000043 4e2d
000044 4e41
000045 4900
000046 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\Mahmo\OneDrive\Desktop\Electric Circuits (2) Project\Code Vision Project Files\Debug\List\Indication and Utility Management.asm(1139): warning: .cseg .db misalignment - padding zero byte
000047 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000048 0006      	.DW  0x06
000049 0004      	.DW  0x04
00004a 0066      	.DW  __REG_VARS*2
                 
00004b 0002      	.DW  0x02
00004c 0160      	.DW  __base_y_G100
00004d 0082      	.DW  _0x2000003*2
                 
00004e 0001      	.DW  0x01
00004f 0167      	.DW  __seed_G103
000050 0084      	.DW  _0x2060060*2
                 
                 _0xFFFFFFFF:
000051 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000052 94f8      	CLI
000053 27ee      	CLR  R30
000054 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000055 e0f1      	LDI  R31,1
000056 bffb      	OUT  GICR,R31
000057 bfeb      	OUT  GICR,R30
000058 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000059 e08d      	LDI  R24,(14-2)+1
00005a e0a2      	LDI  R26,2
00005b 27bb      	CLR  R27
                 __CLEAR_REG:
00005c 93ed      	ST   X+,R30
00005d 958a      	DEC  R24
00005e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00005f e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000060 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000061 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000062 93ed      	ST   X+,R30
000063 9701      	SBIW R24,1
000064 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000065 e9e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000066 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000067 9185      	LPM  R24,Z+
000068 9195      	LPM  R25,Z+
000069 9700      	SBIW R24,0
00006a f061      	BREQ __GLOBAL_INI_END
00006b 91a5      	LPM  R26,Z+
00006c 91b5      	LPM  R27,Z+
00006d 9005      	LPM  R0,Z+
00006e 9015      	LPM  R1,Z+
00006f 01bf      	MOVW R22,R30
000070 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000071 9005      	LPM  R0,Z+
000072 920d      	ST   X+,R0
000073 9701      	SBIW R24,1
000074 f7e1      	BRNE __GLOBAL_INI_LOOP
000075 01fb      	MOVW R30,R22
000076 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000077 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000078 bfed      	OUT  SPL,R30
000079 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00007a bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00007b e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00007c e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00007d 940c 007f 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;void T2_init();
                 ;char Read_Temperature();
                 ;void Temperature_Management();
                 ;void Light_Management();
                 ;void main(void)
                 ; 0000 0013 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0014 DDRB = 0b11111011;                      //set PortB inputs and outputs
00007f efeb      	LDI  R30,LOW(251)
000080 bbe7      	OUT  0x17,R30
                 ; 0000 0015 PORTB = 0b00001111;                     //set pins of lights as high to be low level triggered & int2 pullup resistor
000081 e0ef      	LDI  R30,LOW(15)
000082 bbe8      	OUT  0x18,R30
                 ; 0000 0016 DDRC.0 = 1;                             //set the FULL indicator pin as outpot
000083 9aa0      	SBI  0x14,0
                 ; 0000 0017 PORTD.3 = 1;                            // set int1 pullup resistor
000084 9a93      	SBI  0x12,3
                 ; 0000 0018 PORTC.0 = 1;                            //set the FULL indicator pin to be low level triggered
000085 9aa8      	SBI  0x15,0
                 ; 0000 0019 lcd_init(16);                           //initialize lcd
000086 e1a0      	LDI  R26,LOW(16)
000087 d182      	RCALL _lcd_init
                 ; 0000 001A #asm("sei")                                 //enable global interrupts
000088 9478      	SEI
                 ; 0000 001B MCUCSR |= (1 << ISC2);                  //set int2 to be rising edge triggered
000089 b7e4      	IN   R30,0x34
00008a 64e0      	ORI  R30,0x40
00008b bfe4      	OUT  0x34,R30
                 ; 0000 001C MCUCR |= (1 << ISC10) | (1 << ISC11);   //set int1 to be rising edge triggered
00008c b7e5      	IN   R30,0x35
00008d 60ec      	ORI  R30,LOW(0xC)
00008e bfe5      	OUT  0x35,R30
                 ; 0000 001D GICR |= (1 << INT2) | (1 << INT1);      //enable int2 & int1
00008f b7eb      	IN   R30,0x3B
000090 6ae0      	ORI  R30,LOW(0xA0)
000091 bfeb      	OUT  0x3B,R30
                 ; 0000 001E delay_ms(1000);                         //wait for external clock to stabilize
000092 eea8      	LDI  R26,LOW(1000)
000093 e0b3      	LDI  R27,HIGH(1000)
000094 d3a7      	RCALL _delay_ms
                 ; 0000 001F T2_init();                              //Timer2 initialization
000095 d084      	RCALL _T2_init
                 ; 0000 0020 ADCSRA = 0b10000000;                    //ADC enable
000096 e8e0      	LDI  R30,LOW(128)
000097 b9e6      	OUT  0x6,R30
                 ; 0000 0021 temperature = Read_Temperature();       //Read temperature for the 1st time
000098 d094      	RCALL _Read_Temperature
000099 2e6e      	MOV  R6,R30
                 ; 0000 0022 //main program loop
                 ; 0000 0023 while (1)
                 _0x9:
                 ; 0000 0024 {
                 ; 0000 0025 Light_Management();
00009a d0e8      	RCALL _Light_Management
                 ; 0000 0026 Temperature_Management();
00009b d0af      	RCALL _Temperature_Management
                 ; 0000 0027 //Show clock on lcd
                 ; 0000 0028 lcd_gotoxy(4, 0);
00009c e0e4      	LDI  R30,LOW(4)
00009d 93ea      	ST   -Y,R30
00009e e0a0      	LDI  R26,LOW(0)
00009f d125      	RCALL _lcd_gotoxy
                 ; 0000 0029 lcd_printf("%u:%u:%u", hrs, mins, sec);
                +
0000a0 e6ec     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000a1 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000a2 93fa      	ST   -Y,R31
0000a3 93ea      	ST   -Y,R30
0000a4 2de7      	MOV  R30,R7
0000a5 27ff      	CLR  R31
0000a6 2766      	CLR  R22
0000a7 2777      	CLR  R23
0000a8 d38e      	RCALL __PUTPARD1
0000a9 2de4      	MOV  R30,R4
0000aa 27ff      	CLR  R31
0000ab 2766      	CLR  R22
0000ac 2777      	CLR  R23
0000ad d389      	RCALL __PUTPARD1
0000ae 2de5      	MOV  R30,R5
0000af 27ff      	CLR  R31
0000b0 2766      	CLR  R22
0000b1 2777      	CLR  R23
0000b2 d384      	RCALL __PUTPARD1
0000b3 e08c      	LDI  R24,12
0000b4 d307      	RCALL _lcd_printf
0000b5 962e      	ADIW R28,14
                 ; 0000 002A if(sec % 5 == 0) temperature = Read_Temperature();           //update temperature if 5 seconds have passed
0000b6 2da5      	MOV  R26,R5
0000b7 27bb      	CLR  R27
0000b8 e0e5      	LDI  R30,LOW(5)
0000b9 e0f0      	LDI  R31,HIGH(5)
0000ba d366      	RCALL __MODW21
0000bb 9730      	SBIW R30,0
0000bc f411      	BRNE _0xC
0000bd d06f      	RCALL _Read_Temperature
0000be 2e6e      	MOV  R6,R30
                 ; 0000 002B //show temperature on lcd
                 ; 0000 002C lcd_gotoxy(0, 1);
                 _0xC:
0000bf e0e0      	LDI  R30,LOW(0)
0000c0 93ea      	ST   -Y,R30
0000c1 e0a1      	LDI  R26,LOW(1)
0000c2 d102      	RCALL _lcd_gotoxy
                 ; 0000 002D lcd_printf("%u+-1C", temperature);
                +
0000c3 e7e5     +LDI R30 , LOW ( 2 * _0x0 + ( 9 ) )
0000c4 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 9 ) )
                 	__POINTW1FN _0x0,9
0000c5 93fa      	ST   -Y,R31
0000c6 93ea      	ST   -Y,R30
0000c7 2de6      	MOV  R30,R6
0000c8 27ff      	CLR  R31
0000c9 2766      	CLR  R22
0000ca 2777      	CLR  R23
0000cb d36b      	RCALL __PUTPARD1
0000cc e084      	LDI  R24,4
0000cd d2ee      	RCALL _lcd_printf
0000ce 9626      	ADIW R28,6
                 ; 0000 002E //show student number on lcd
                 ; 0000 002F lcd_gotoxy(12, 1);
0000cf e0ec      	LDI  R30,LOW(12)
0000d0 93ea      	ST   -Y,R30
0000d1 e0a1      	LDI  R26,LOW(1)
0000d2 d0f2      	RCALL _lcd_gotoxy
                 ; 0000 0030 //show "FULL" instead of student number and turn on red led if student number >=25
                 ; 0000 0031 if (studentNumber >= 25)
0000d3 e1e9      	LDI  R30,LOW(25)
0000d4 169e      	CP   R9,R30
0000d5 f048      	BRLO _0xD
                 ; 0000 0032 {
                 ; 0000 0033 lcd_printf("FULL");
                +
0000d6 e7ec     +LDI R30 , LOW ( 2 * _0x0 + ( 16 ) )
0000d7 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 16 ) )
                 	__POINTW1FN _0x0,16
0000d8 93fa      	ST   -Y,R31
0000d9 93ea      	ST   -Y,R30
0000da e080      	LDI  R24,0
0000db d2e0      	RCALL _lcd_printf
0000dc 9622      	ADIW R28,2
                 ; 0000 0034 PORTC.0 = 0;
0000dd 98a8      	CBI  0x15,0
                 ; 0000 0035 }
                 ; 0000 0036 else
0000de c00d      	RJMP _0x10
                 _0xD:
                 ; 0000 0037 {
                 ; 0000 0038 lcd_printf("%u", studentNumber);
                +
0000df e7e2     +LDI R30 , LOW ( 2 * _0x0 + ( 6 ) )
0000e0 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 6 ) )
                 	__POINTW1FN _0x0,6
0000e1 93fa      	ST   -Y,R31
0000e2 93ea      	ST   -Y,R30
0000e3 2de9      	MOV  R30,R9
0000e4 27ff      	CLR  R31
0000e5 2766      	CLR  R22
0000e6 2777      	CLR  R23
0000e7 d34f      	RCALL __PUTPARD1
0000e8 e084      	LDI  R24,4
0000e9 d2d2      	RCALL _lcd_printf
0000ea 9626      	ADIW R28,6
                 ; 0000 0039 PORTC.0 = 1;
0000eb 9aa8      	SBI  0x15,0
                 ; 0000 003A }
                 _0x10:
                 ; 0000 003B delay_ms(100);
0000ec e6a4      	LDI  R26,LOW(100)
0000ed e0b0      	LDI  R27,0
0000ee d34d      	RCALL _delay_ms
                 ; 0000 003C lcd_clear();
0000ef d0e9      	RCALL _lcd_clear
                 ; 0000 003D }
0000f0 cfa9      	RJMP _0x9
                 ; 0000 003E }
                 _0x13:
0000f1 cfff      	RJMP _0x13
                 ; .FEND
                 ;interrupt [19] void studentLeaving(void)
                 ; 0000 0046 {
                 _studentLeaving:
                 ; .FSTART _studentLeaving
0000f2 93ea      	ST   -Y,R30
0000f3 b7ef      	IN   R30,SREG
0000f4 93ea      	ST   -Y,R30
                 ; 0000 0047 if (studentNumber > 0)studentNumber--;              //decrement student number by one
0000f5 e0e0      	LDI  R30,LOW(0)
0000f6 15e9      	CP   R30,R9
0000f7 f408      	BRSH _0x14
0000f8 949a      	DEC  R9
                 ; 0000 0048 }
                 _0x14:
0000f9 91e9      	LD   R30,Y+
0000fa bfef      	OUT  SREG,R30
0000fb 91e9      	LD   R30,Y+
0000fc 9518      	RETI
                 ; .FEND
                 ;interrupt [3] void studentEntering(void)
                 ; 0000 004B {
                 _studentEntering:
                 ; .FSTART _studentEntering
0000fd 93ea      	ST   -Y,R30
0000fe b7ef      	IN   R30,SREG
0000ff 93ea      	ST   -Y,R30
                 ; 0000 004C if (studentNumber < 25)studentNumber++;             //increment student number by one
000100 e1e9      	LDI  R30,LOW(25)
000101 169e      	CP   R9,R30
000102 f408      	BRSH _0x15
000103 9493      	INC  R9
                 ; 0000 004D }
                 _0x15:
000104 91e9      	LD   R30,Y+
000105 bfef      	OUT  SREG,R30
000106 91e9      	LD   R30,Y+
000107 9518      	RETI
                 ; .FEND
                 ;interrupt [5] void t2_ovf_int(void)
                 ; 0000 0051 {
                 _t2_ovf_int:
                 ; .FSTART _t2_ovf_int
000108 93ea      	ST   -Y,R30
000109 b7ef      	IN   R30,SREG
00010a 93ea      	ST   -Y,R30
                 ; 0000 0052 sec++;                                              //increment seconds by one
00010b 9453      	INC  R5
                 ; 0000 0053 if(sec > 59) {sec = 0; mins++;}                     //increment minutes and reset seconds when seconds reach 60
00010c e3eb      	LDI  R30,LOW(59)
00010d 15e5      	CP   R30,R5
00010e f410      	BRSH _0x16
00010f 2455      	CLR  R5
000110 9443      	INC  R4
                 ; 0000 0054 if(mins > 59) {mins = 0; hrs++;}                    //increment hours and reset minutes when minutes reach 60
                 _0x16:
000111 e3eb      	LDI  R30,LOW(59)
000112 15e4      	CP   R30,R4
000113 f410      	BRSH _0x17
000114 2444      	CLR  R4
000115 9473      	INC  R7
                 ; 0000 0055 }
                 _0x17:
000116 91e9      	LD   R30,Y+
000117 bfef      	OUT  SREG,R30
000118 91e9      	LD   R30,Y+
000119 9518      	RETI
                 ; .FEND
                 ;void T2_init()
                 ; 0000 0058 {
                 _T2_init:
                 ; .FSTART _T2_init
                 ; 0000 0059 TIMSK &= ~( (1 << OCIE2) | (1 << TOIE2) );          //disable timer2 interrupts
00011a b7e9      	IN   R30,0x39
00011b 73ef      	ANDI R30,LOW(0x3F)
00011c bfe9      	OUT  0x39,R30
                 ; 0000 005A ASSR = (1 << AS2);                                  //Set timer2 to be asynchronous(external clock)
00011d e0e8      	LDI  R30,LOW(8)
00011e bde2      	OUT  0x22,R30
                 ; 0000 005B TCNT2 = 0;                                          //Clear counter
00011f e0e0      	LDI  R30,LOW(0)
000120 bde4      	OUT  0x24,R30
                 ; 0000 005C TCCR2 = 0b00000101;                                 //set prescaler
000121 e0e5      	LDI  R30,LOW(5)
000122 bde5      	OUT  0x25,R30
                 ; 0000 005D while (ASSR & ((1 << TCN2UB) | (1 << TCR2UB)));     //Wait for register update
                 _0x18:
000123 b5e2      	IN   R30,0x22
000124 70e5      	ANDI R30,LOW(0x5)
000125 f7e9      	BRNE _0x18
                 ; 0000 005E TIFR |= (0b11000000) ;                              //clear inturrupt flags
000126 b7e8      	IN   R30,0x38
000127 6ce0      	ORI  R30,LOW(0xC0)
000128 bfe8      	OUT  0x38,R30
                 ; 0000 005F TIMSK |= 1 << TOIE2;                                //enable timer2 overflow interrupt
000129 b7e9      	IN   R30,0x39
00012a 64e0      	ORI  R30,0x40
00012b bfe9      	OUT  0x39,R30
                 ; 0000 0060 }
00012c 9508      	RET
                 ; .FEND
                 ;char Read_Temperature()
                 ; 0000 0063 {
                 _Read_Temperature:
                 ; .FSTART _Read_Temperature
                 ; 0000 0064 char result = 0;         //variable to store adc conversion result
                 ; 0000 0065 //set vcc as voltage reference, result to be left adjusted and adc3(PA3) to be used
                 ; 0000 0066 ADMUX |= (0 << REFS1) | (1 << REFS0) | (1 << ADLAR) | (0 << MUX4) | (0 << MUX3 ) | (0 << MUX2) | (1 << MUX1) | (1 << MUX0);
00012d 931a      	ST   -Y,R17
                 ;	result -> R17
00012e e010      	LDI  R17,0
00012f b1e7      	IN   R30,0x7
000130 66e3      	ORI  R30,LOW(0x63)
000131 b9e7      	OUT  0x7,R30
                 ; 0000 0067 ADCSRA |= (1 << ADSC) | (1 << ADPS2) | (0 << ADPS1) | (1 << ADPS0);                 // set prescaler & start conversion
000132 b1e6      	IN   R30,0x6
000133 64e5      	ORI  R30,LOW(0x45)
000134 b9e6      	OUT  0x6,R30
                 ; 0000 0068 while(!(ADCSRA & (1 << ADIF)));         // wait for ADIF conversion complete return
                 _0x1B:
000135 9b34      	SBIS 0x6,4
000136 cffe      	RJMP _0x1B
                 ; 0000 0069 ADCSRA |= (1 << ADIF);                  //Clear ADIF
000137 9a34      	SBI  0x6,4
                 ; 0000 006A //Calculate result
                 ; 0000 006B if (ADCH >= 0 && ADCH <=25)result = ADCH*2;
000138 b1e5      	IN   R30,0x5
000139 30e0      	CPI  R30,0
00013a f018      	BRLO _0x1F
00013b b1e5      	IN   R30,0x5
00013c 31ea      	CPI  R30,LOW(0x1A)
00013d f008      	BRLO _0x20
                 _0x1F:
00013e c004      	RJMP _0x1E
                 _0x20:
00013f b1e5      	IN   R30,0x5
000140 0fee      	LSL  R30
000141 2f1e      	MOV  R17,R30
                 ; 0000 006C else if (ADCH >25)result = 50;
000142 c006      	RJMP _0x21
                 _0x1E:
000143 b1e5      	IN   R30,0x5
000144 31ea      	CPI  R30,LOW(0x1A)
000145 f010      	BRLO _0x22
000146 e312      	LDI  R17,LOW(50)
                 ; 0000 006D else result = 0;
000147 c001      	RJMP _0x23
                 _0x22:
000148 e010      	LDI  R17,LOW(0)
                 ; 0000 006E return result;
                 _0x23:
                 _0x21:
000149 2fe1      	MOV  R30,R17
00014a c0f4      	RJMP _0x20C0001
                 ; 0000 006F }
                 ; .FEND
                 ;void Temperature_Management()
                 ; 0000 0072 {
                 _Temperature_Management:
                 ; .FSTART _Temperature_Management
                 ; 0000 0073 //turn on 2 heaters if temperature is between 0 & 10
                 ; 0000 0074 if (temperature >= 0 && temperature < 10)
00014b e0e0      	LDI  R30,LOW(0)
00014c 166e      	CP   R6,R30
00014d f018      	BRLO _0x25
00014e e0ea      	LDI  R30,LOW(10)
00014f 166e      	CP   R6,R30
000150 f008      	BRLO _0x26
                 _0x25:
000151 c004      	RJMP _0x24
                 _0x26:
                 ; 0000 0075 {
                 ; 0000 0076 PORTB.4 = 1;
000152 9ac4      	SBI  0x18,4
                 ; 0000 0077 PORTB.5 = 1;
000153 9ac5      	SBI  0x18,5
                 ; 0000 0078 PORTB.6 = 0;
000154 98c6      	CBI  0x18,6
                 ; 0000 0079 PORTB.7 = 0;
000155 98c7      	CBI  0x18,7
                 ; 0000 007A }
                 ; 0000 007B //turn on 1 heater if temperature is between 10 & 20
                 ; 0000 007C if (temperature >= 10 && temperature < 20)
                 _0x24:
000156 e0ea      	LDI  R30,LOW(10)
000157 166e      	CP   R6,R30
000158 f018      	BRLO _0x30
000159 e1e4      	LDI  R30,LOW(20)
00015a 166e      	CP   R6,R30
00015b f008      	BRLO _0x31
                 _0x30:
00015c c004      	RJMP _0x2F
                 _0x31:
                 ; 0000 007D {
                 ; 0000 007E PORTB.4 = 1;
00015d 9ac4      	SBI  0x18,4
                 ; 0000 007F PORTB.5 = 0;
00015e 98c5      	CBI  0x18,5
                 ; 0000 0080 PORTB.6 = 0;
00015f 98c6      	CBI  0x18,6
                 ; 0000 0081 PORTB.7 = 0;
000160 98c7      	CBI  0x18,7
                 ; 0000 0082 }
                 ; 0000 0083 //turn of all heaters & ACs if temperature is between 20 & 30
                 ; 0000 0084 if (temperature >= 20 && temperature < 30)
                 _0x2F:
000161 e1e4      	LDI  R30,LOW(20)
000162 166e      	CP   R6,R30
000163 f018      	BRLO _0x3B
000164 e1ee      	LDI  R30,LOW(30)
000165 166e      	CP   R6,R30
000166 f008      	BRLO _0x3C
                 _0x3B:
000167 c004      	RJMP _0x3A
                 _0x3C:
                 ; 0000 0085 {
                 ; 0000 0086 PORTB.4 = 0;
000168 98c4      	CBI  0x18,4
                 ; 0000 0087 PORTB.5 = 0;
000169 98c5      	CBI  0x18,5
                 ; 0000 0088 PORTB.6 = 0;
00016a 98c6      	CBI  0x18,6
                 ; 0000 0089 PORTB.7 = 0;
00016b 98c7      	CBI  0x18,7
                 ; 0000 008A }
                 ; 0000 008B //turn on 1 AC if temperature is between 30 & 40
                 ; 0000 008C if (temperature >= 30 && temperature < 40)
                 _0x3A:
00016c e1ee      	LDI  R30,LOW(30)
00016d 166e      	CP   R6,R30
00016e f018      	BRLO _0x46
00016f e2e8      	LDI  R30,LOW(40)
000170 166e      	CP   R6,R30
000171 f008      	BRLO _0x47
                 _0x46:
000172 c004      	RJMP _0x45
                 _0x47:
                 ; 0000 008D {
                 ; 0000 008E PORTB.4 = 0;
000173 98c4      	CBI  0x18,4
                 ; 0000 008F PORTB.5 = 0;
000174 98c5      	CBI  0x18,5
                 ; 0000 0090 PORTB.6 = 1;
000175 9ac6      	SBI  0x18,6
                 ; 0000 0091 PORTB.7 = 0;
000176 98c7      	CBI  0x18,7
                 ; 0000 0092 }
                 ; 0000 0093 //turn on 2 ACs if temperature is between 40 & 50
                 ; 0000 0094 if (temperature >= 40 && temperature <= 50)
                 _0x45:
000177 e2e8      	LDI  R30,LOW(40)
000178 166e      	CP   R6,R30
000179 f018      	BRLO _0x51
00017a e3e2      	LDI  R30,LOW(50)
00017b 15e6      	CP   R30,R6
00017c f408      	BRSH _0x52
                 _0x51:
00017d c004      	RJMP _0x50
                 _0x52:
                 ; 0000 0095 {
                 ; 0000 0096 PORTB.4 = 0;
00017e 98c4      	CBI  0x18,4
                 ; 0000 0097 PORTB.5 = 0;
00017f 98c5      	CBI  0x18,5
                 ; 0000 0098 PORTB.6 = 1;
000180 9ac6      	SBI  0x18,6
                 ; 0000 0099 PORTB.7 = 1;
000181 9ac7      	SBI  0x18,7
                 ; 0000 009A }
                 ; 0000 009B }
                 _0x50:
000182 9508      	RET
                 ; .FEND
                 ;void Light_Management()
                 ; 0000 009E {
                 _Light_Management:
                 ; .FSTART _Light_Management
                 ; 0000 009F //Turn on 1 portion of light if number of students is greater than 0 and less than 10
                 ; 0000 00A0 if (studentNumber > 0 && studentNumber <= 10)
000183 e0e0      	LDI  R30,LOW(0)
000184 15e9      	CP   R30,R9
000185 f418      	BRSH _0x5C
000186 e0ea      	LDI  R30,LOW(10)
000187 15e9      	CP   R30,R9
000188 f408      	BRSH _0x5D
                 _0x5C:
000189 c003      	RJMP _0x5B
                 _0x5D:
                 ; 0000 00A1 {
                 ; 0000 00A2 PORTB.3 = 1;
00018a 9ac3      	SBI  0x18,3
                 ; 0000 00A3 PORTB.1 = 1;
00018b 9ac1      	SBI  0x18,1
                 ; 0000 00A4 PORTB.0 = 0;
00018c 98c0      	CBI  0x18,0
                 ; 0000 00A5 }
                 ; 0000 00A6 //Turn on 2 portions of light if number of students is greater than 10 and less than 20
                 ; 0000 00A7 if (studentNumber > 10 && studentNumber < 20)
                 _0x5B:
00018d e0ea      	LDI  R30,LOW(10)
00018e 15e9      	CP   R30,R9
00018f f418      	BRSH _0x65
000190 e1e4      	LDI  R30,LOW(20)
000191 169e      	CP   R9,R30
000192 f008      	BRLO _0x66
                 _0x65:
000193 c003      	RJMP _0x64
                 _0x66:
                 ; 0000 00A8 {
                 ; 0000 00A9 PORTB.3 = 1;
000194 9ac3      	SBI  0x18,3
                 ; 0000 00AA PORTB.1 = 0;
000195 98c1      	CBI  0x18,1
                 ; 0000 00AB PORTB.0 = 0;
000196 98c0      	CBI  0x18,0
                 ; 0000 00AC }
                 ; 0000 00AD //Turn on 3 portions of light if number of students is greater than 20
                 ; 0000 00AE if (studentNumber >= 20)
                 _0x64:
000197 e1e4      	LDI  R30,LOW(20)
000198 169e      	CP   R9,R30
000199 f018      	BRLO _0x6D
                 ; 0000 00AF {
                 ; 0000 00B0 PORTB.3 = 0;
00019a 98c3      	CBI  0x18,3
                 ; 0000 00B1 PORTB.1 = 0;
00019b 98c1      	CBI  0x18,1
                 ; 0000 00B2 PORTB.0 = 0;
00019c 98c0      	CBI  0x18,0
                 ; 0000 00B3 }
                 ; 0000 00B4 //Turn off alll lights if number of students is 0
                 ; 0000 00B5 if (studentNumber <= 0)
                 _0x6D:
00019d 2099      	TST  R9
00019e f419      	BRNE _0x74
                 ; 0000 00B6 {
                 ; 0000 00B7 PORTB.3 = 1;
00019f 9ac3      	SBI  0x18,3
                 ; 0000 00B8 PORTB.1 = 1;
0001a0 9ac1      	SBI  0x18,1
                 ; 0000 00B9 PORTB.0 = 1;
0001a1 9ac0      	SBI  0x18,0
                 ; 0000 00BA }
                 ; 0000 00BB }
                 _0x74:
0001a2 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0001a3 931a      	ST   -Y,R17
0001a4 2f1a      	MOV  R17,R26
0001a5 b3e2      	IN   R30,0x12
0001a6 70ef      	ANDI R30,LOW(0xF)
0001a7 2fae      	MOV  R26,R30
0001a8 2fe1      	MOV  R30,R17
0001a9 7fe0      	ANDI R30,LOW(0xF0)
0001aa 2bea      	OR   R30,R26
0001ab bbe2      	OUT  0x12,R30
                +
0001ac e087     +LDI R24 , LOW ( 7 )
                +__DELAY_USB_LOOP :
0001ad 958a     +DEC R24
0001ae f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 7
0001af 9a92      	SBI  0x12,2
                +
0001b0 e087     +LDI R24 , LOW ( 7 )
                +__DELAY_USB_LOOP :
0001b1 958a     +DEC R24
0001b2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 7
0001b3 9892      	CBI  0x12,2
                +
0001b4 e087     +LDI R24 , LOW ( 7 )
                +__DELAY_USB_LOOP :
0001b5 958a     +DEC R24
0001b6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 7
0001b7 c087      	RJMP _0x20C0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0001b8 93aa      	ST   -Y,R26
0001b9 81a8      	LD   R26,Y
0001ba dfe8      	RCALL __lcd_write_nibble_G100
0001bb 81e8          ld    r30,y
0001bc 95e2          swap  r30
0001bd 83e8          st    y,r30
0001be 81a8      	LD   R26,Y
0001bf dfe3      	RCALL __lcd_write_nibble_G100
                +
0001c0 e483     +LDI R24 , LOW ( 67 )
                +__DELAY_USB_LOOP :
0001c1 958a     +DEC R24
0001c2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 67
0001c3 9621      	ADIW R28,1
0001c4 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0001c5 931a      	ST   -Y,R17
0001c6 930a      	ST   -Y,R16
0001c7 2f1a      	MOV  R17,R26
0001c8 810a      	LDD  R16,Y+2
0001c9 2fe1      	MOV  R30,R17
0001ca e0f0      	LDI  R31,0
0001cb 5ae0      	SUBI R30,LOW(-__base_y_G100)
0001cc 4ffe      	SBCI R31,HIGH(-__base_y_G100)
0001cd 81e0      	LD   R30,Z
0001ce 0fe0      	ADD  R30,R16
0001cf 2fae      	MOV  R26,R30
0001d0 dfe7      	RCALL __lcd_write_data
0001d1 9300 0164 	STS  __lcd_x,R16
0001d3 9310 0165 	STS  __lcd_y,R17
0001d5 8119      	LDD  R17,Y+1
0001d6 8108      	LDD  R16,Y+0
0001d7 9623      	ADIW R28,3
0001d8 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0001d9 e0a2      	LDI  R26,LOW(2)
0001da dfdd      	RCALL __lcd_write_data
0001db e0a3      	LDI  R26,LOW(3)
0001dc e0b0      	LDI  R27,0
0001dd d25e      	RCALL _delay_ms
0001de e0ac      	LDI  R26,LOW(12)
0001df dfd8      	RCALL __lcd_write_data
0001e0 e0a1      	LDI  R26,LOW(1)
0001e1 dfd6      	RCALL __lcd_write_data
0001e2 e0a3      	LDI  R26,LOW(3)
0001e3 e0b0      	LDI  R27,0
0001e4 d257      	RCALL _delay_ms
0001e5 e0e0      	LDI  R30,LOW(0)
0001e6 93e0 0165 	STS  __lcd_y,R30
0001e8 93e0 0164 	STS  __lcd_x,R30
0001ea 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0001eb 931a      	ST   -Y,R17
0001ec 2f1a      	MOV  R17,R26
0001ed 301a      	CPI  R17,10
0001ee f031      	BREQ _0x2000005
0001ef 91e0 0166 	LDS  R30,__lcd_maxx
0001f1 91a0 0164 	LDS  R26,__lcd_x
0001f3 17ae      	CP   R26,R30
0001f4 f058      	BRLO _0x2000004
                 _0x2000005:
0001f5 e0e0      	LDI  R30,LOW(0)
0001f6 93ea      	ST   -Y,R30
0001f7 91a0 0165 	LDS  R26,__lcd_y
0001f9 5faf      	SUBI R26,-LOW(1)
0001fa 93a0 0165 	STS  __lcd_y,R26
0001fc dfc8      	RCALL _lcd_gotoxy
0001fd 301a      	CPI  R17,10
0001fe f409      	BRNE _0x2000007
0001ff c03f      	RJMP _0x20C0001
                 _0x2000007:
                 _0x2000004:
000200 91e0 0164 	LDS  R30,__lcd_x
000202 5fef      	SUBI R30,-LOW(1)
000203 93e0 0164 	STS  __lcd_x,R30
000205 9a90      	SBI  0x12,0
000206 2fa1      	MOV  R26,R17
000207 dfb0      	RCALL __lcd_write_data
000208 9890      	CBI  0x12,0
000209 c035      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00020a 931a      	ST   -Y,R17
00020b 2f1a      	MOV  R17,R26
00020c b3e1      	IN   R30,0x11
00020d 6fe0      	ORI  R30,LOW(0xF0)
00020e bbe1      	OUT  0x11,R30
00020f 9a8a      	SBI  0x11,2
000210 9a88      	SBI  0x11,0
000211 9a89      	SBI  0x11,1
000212 9892      	CBI  0x12,2
000213 9890      	CBI  0x12,0
000214 9891      	CBI  0x12,1
000215 9310 0166 	STS  __lcd_maxx,R17
000217 2fe1      	MOV  R30,R17
000218 58e0      	SUBI R30,-LOW(128)
                +
000219 93e0 0162+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00021b 2fe1      	MOV  R30,R17
00021c 54e0      	SUBI R30,-LOW(192)
                +
00021d 93e0 0163+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00021f e1a4      	LDI  R26,LOW(20)
000220 e0b0      	LDI  R27,0
000221 d21a      	RCALL _delay_ms
000222 e3a0      	LDI  R26,LOW(48)
000223 df7f      	RCALL __lcd_write_nibble_G100
                +
000224 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000225 958a     +DEC R24
000226 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000227 e3a0      	LDI  R26,LOW(48)
000228 df7a      	RCALL __lcd_write_nibble_G100
                +
000229 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00022a 958a     +DEC R24
00022b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00022c e3a0      	LDI  R26,LOW(48)
00022d df75      	RCALL __lcd_write_nibble_G100
                +
00022e e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00022f 958a     +DEC R24
000230 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000231 e2a0      	LDI  R26,LOW(32)
000232 df70      	RCALL __lcd_write_nibble_G100
                +
000233 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000234 958a     +DEC R24
000235 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000236 e2a8      	LDI  R26,LOW(40)
000237 df80      	RCALL __lcd_write_data
000238 e0a4      	LDI  R26,LOW(4)
000239 df7e      	RCALL __lcd_write_data
00023a e8a5      	LDI  R26,LOW(133)
00023b df7c      	RCALL __lcd_write_data
00023c e0a6      	LDI  R26,LOW(6)
00023d df7a      	RCALL __lcd_write_data
00023e df9a      	RCALL _lcd_clear
                 _0x20C0001:
00023f 9119      	LD   R17,Y+
000240 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 __print_G102:
                 ; .FSTART __print_G102
000241 93ba      	ST   -Y,R27
000242 93aa      	ST   -Y,R26
000243 9726      	SBIW R28,6
000244 d1b3      	RCALL __SAVELOCR6
000245 e010      	LDI  R17,0
000246 85ac      	LDD  R26,Y+12
000247 85bd      	LDD  R27,Y+12+1
000248 e0e0      	LDI  R30,LOW(0)
000249 e0f0      	LDI  R31,HIGH(0)
00024a 93ed      	ST   X+,R30
00024b 93fc      	ST   X,R31
                 _0x2040016:
00024c 89ea      	LDD  R30,Y+18
00024d 89fb      	LDD  R31,Y+18+1
00024e 9631      	ADIW R30,1
00024f 8bea      	STD  Y+18,R30
000250 8bfb      	STD  Y+18+1,R31
000251 9731      	SBIW R30,1
000252 91e4      	LPM  R30,Z
000253 2f2e      	MOV  R18,R30
000254 30e0      	CPI  R30,0
000255 f409      	BRNE PC+2
000256 c150      	RJMP _0x2040018
000257 2fe1      	MOV  R30,R17
000258 30e0      	CPI  R30,0
000259 f459      	BRNE _0x204001C
00025a 3225      	CPI  R18,37
00025b f411      	BRNE _0x204001D
00025c e011      	LDI  R17,LOW(1)
00025d c006      	RJMP _0x204001E
                 _0x204001D:
00025e 932a      	ST   -Y,R18
00025f 85ad      	LDD  R26,Y+13
000260 85be      	LDD  R27,Y+13+1
000261 85ef      	LDD  R30,Y+15
000262 89f8      	LDD  R31,Y+15+1
000263 9509      	ICALL
                 _0x204001E:
000264 c141      	RJMP _0x204001B
                 _0x204001C:
000265 30e1      	CPI  R30,LOW(0x1)
000266 f4c9      	BRNE _0x204001F
000267 3225      	CPI  R18,37
000268 f439      	BRNE _0x2040020
000269 932a      	ST   -Y,R18
00026a 85ad      	LDD  R26,Y+13
00026b 85be      	LDD  R27,Y+13+1
00026c 85ef      	LDD  R30,Y+15
00026d 89f8      	LDD  R31,Y+15+1
00026e 9509      	ICALL
00026f c135      	RJMP _0x20400CC
                 _0x2040020:
000270 e012      	LDI  R17,LOW(2)
000271 e040      	LDI  R20,LOW(0)
000272 e000      	LDI  R16,LOW(0)
000273 322d      	CPI  R18,45
000274 f411      	BRNE _0x2040021
000275 e001      	LDI  R16,LOW(1)
000276 c12f      	RJMP _0x204001B
                 _0x2040021:
000277 322b      	CPI  R18,43
000278 f411      	BRNE _0x2040022
000279 e24b      	LDI  R20,LOW(43)
00027a c12b      	RJMP _0x204001B
                 _0x2040022:
00027b 3220      	CPI  R18,32
00027c f411      	BRNE _0x2040023
00027d e240      	LDI  R20,LOW(32)
00027e c127      	RJMP _0x204001B
                 _0x2040023:
00027f c002      	RJMP _0x2040024
                 _0x204001F:
000280 30e2      	CPI  R30,LOW(0x2)
000281 f439      	BRNE _0x2040025
                 _0x2040024:
000282 e050      	LDI  R21,LOW(0)
000283 e013      	LDI  R17,LOW(3)
000284 3320      	CPI  R18,48
000285 f411      	BRNE _0x2040026
000286 6800      	ORI  R16,LOW(128)
000287 c11e      	RJMP _0x204001B
                 _0x2040026:
000288 c003      	RJMP _0x2040027
                 _0x2040025:
000289 30e3      	CPI  R30,LOW(0x3)
00028a f009      	BREQ PC+2
00028b c11a      	RJMP _0x204001B
                 _0x2040027:
00028c 3320      	CPI  R18,48
00028d f010      	BRLO _0x204002A
00028e 332a      	CPI  R18,58
00028f f008      	BRLO _0x204002B
                 _0x204002A:
000290 c007      	RJMP _0x2040029
                 _0x204002B:
000291 e0aa      	LDI  R26,LOW(10)
000292 9f5a      	MUL  R21,R26
000293 2d50      	MOV  R21,R0
000294 2fe2      	MOV  R30,R18
000295 53e0      	SUBI R30,LOW(48)
000296 0f5e      	ADD  R21,R30
000297 c10e      	RJMP _0x204001B
                 _0x2040029:
000298 2fe2      	MOV  R30,R18
000299 36e3      	CPI  R30,LOW(0x63)
00029a f469      	BRNE _0x204002F
00029b 89e8      	LDD  R30,Y+16
00029c 89f9      	LDD  R31,Y+16+1
00029d 9734      	SBIW R30,4
00029e 8be8      	STD  Y+16,R30
00029f 8bf9      	STD  Y+16+1,R31
0002a0 81a4      	LDD  R26,Z+4
0002a1 93aa      	ST   -Y,R26
0002a2 85ad      	LDD  R26,Y+13
0002a3 85be      	LDD  R27,Y+13+1
0002a4 85ef      	LDD  R30,Y+15
0002a5 89f8      	LDD  R31,Y+15+1
0002a6 9509      	ICALL
0002a7 c0fd      	RJMP _0x2040030
                 _0x204002F:
0002a8 37e3      	CPI  R30,LOW(0x73)
0002a9 f489      	BRNE _0x2040032
0002aa 89e8      	LDD  R30,Y+16
0002ab 89f9      	LDD  R31,Y+16+1
0002ac 9734      	SBIW R30,4
0002ad 8be8      	STD  Y+16,R30
0002ae 8bf9      	STD  Y+16+1,R31
0002af 89a8      	LDD  R26,Y+16
0002b0 89b9      	LDD  R27,Y+16+1
0002b1 9614      	ADIW R26,4
0002b2 91ed      	LD   R30,X+
0002b3 91fd      	LD   R31,X+
0002b4 83ee      	STD  Y+6,R30
0002b5 83ff      	STD  Y+6+1,R31
0002b6 81ae      	LDD  R26,Y+6
0002b7 81bf      	LDD  R27,Y+6+1
0002b8 d126      	RCALL _strlen
0002b9 2f1e      	MOV  R17,R30
0002ba c013      	RJMP _0x2040033
                 _0x2040032:
0002bb 37e0      	CPI  R30,LOW(0x70)
0002bc f4a9      	BRNE _0x2040035
0002bd 89e8      	LDD  R30,Y+16
0002be 89f9      	LDD  R31,Y+16+1
0002bf 9734      	SBIW R30,4
0002c0 8be8      	STD  Y+16,R30
0002c1 8bf9      	STD  Y+16+1,R31
0002c2 89a8      	LDD  R26,Y+16
0002c3 89b9      	LDD  R27,Y+16+1
0002c4 9614      	ADIW R26,4
0002c5 91ed      	LD   R30,X+
0002c6 91fd      	LD   R31,X+
0002c7 83ee      	STD  Y+6,R30
0002c8 83ff      	STD  Y+6+1,R31
0002c9 81ae      	LDD  R26,Y+6
0002ca 81bf      	LDD  R27,Y+6+1
0002cb d11f      	RCALL _strlenf
0002cc 2f1e      	MOV  R17,R30
0002cd 6008      	ORI  R16,LOW(8)
                 _0x2040033:
0002ce 6002      	ORI  R16,LOW(2)
0002cf 770f      	ANDI R16,LOW(127)
0002d0 e030      	LDI  R19,LOW(0)
0002d1 c040      	RJMP _0x2040036
                 _0x2040035:
0002d2 36e4      	CPI  R30,LOW(0x64)
0002d3 f011      	BREQ _0x2040039
0002d4 36e9      	CPI  R30,LOW(0x69)
0002d5 f411      	BRNE _0x204003A
                 _0x2040039:
0002d6 6004      	ORI  R16,LOW(4)
0002d7 c002      	RJMP _0x204003B
                 _0x204003A:
0002d8 37e5      	CPI  R30,LOW(0x75)
0002d9 f431      	BRNE _0x204003C
                 _0x204003B:
0002da e5e4      	LDI  R30,LOW(_tbl10_G102*2)
0002db e0f0      	LDI  R31,HIGH(_tbl10_G102*2)
0002dc 83ee      	STD  Y+6,R30
0002dd 83ff      	STD  Y+6+1,R31
0002de e015      	LDI  R17,LOW(5)
0002df c00c      	RJMP _0x204003D
                 _0x204003C:
0002e0 35e8      	CPI  R30,LOW(0x58)
0002e1 f411      	BRNE _0x204003F
0002e2 6008      	ORI  R16,LOW(8)
0002e3 c003      	RJMP _0x2040040
                 _0x204003F:
0002e4 37e8      	CPI  R30,LOW(0x78)
0002e5 f009      	BREQ PC+2
0002e6 c0be      	RJMP _0x2040071
                 _0x2040040:
0002e7 e5ee      	LDI  R30,LOW(_tbl16_G102*2)
0002e8 e0f0      	LDI  R31,HIGH(_tbl16_G102*2)
0002e9 83ee      	STD  Y+6,R30
0002ea 83ff      	STD  Y+6+1,R31
0002eb e014      	LDI  R17,LOW(4)
                 _0x204003D:
0002ec ff02      	SBRS R16,2
0002ed c019      	RJMP _0x2040042
0002ee 89e8      	LDD  R30,Y+16
0002ef 89f9      	LDD  R31,Y+16+1
0002f0 9734      	SBIW R30,4
0002f1 8be8      	STD  Y+16,R30
0002f2 8bf9      	STD  Y+16+1,R31
0002f3 89a8      	LDD  R26,Y+16
0002f4 89b9      	LDD  R27,Y+16+1
0002f5 9614      	ADIW R26,4
0002f6 91ed      	LD   R30,X+
0002f7 91fd      	LD   R31,X+
0002f8 87ea      	STD  Y+10,R30
0002f9 87fb      	STD  Y+10+1,R31
0002fa 85ab      	LDD  R26,Y+11
0002fb 23aa      	TST  R26
0002fc f422      	BRPL _0x2040043
0002fd d10c      	RCALL __ANEGW1
0002fe 87ea      	STD  Y+10,R30
0002ff 87fb      	STD  Y+10+1,R31
000300 e24d      	LDI  R20,LOW(45)
                 _0x2040043:
000301 3040      	CPI  R20,0
000302 f011      	BREQ _0x2040044
000303 5f1f      	SUBI R17,-LOW(1)
000304 c001      	RJMP _0x2040045
                 _0x2040044:
000305 7f0b      	ANDI R16,LOW(251)
                 _0x2040045:
000306 c00b      	RJMP _0x2040046
                 _0x2040042:
000307 89e8      	LDD  R30,Y+16
000308 89f9      	LDD  R31,Y+16+1
000309 9734      	SBIW R30,4
00030a 8be8      	STD  Y+16,R30
00030b 8bf9      	STD  Y+16+1,R31
00030c 89a8      	LDD  R26,Y+16
00030d 89b9      	LDD  R27,Y+16+1
00030e 9614      	ADIW R26,4
00030f d11f      	RCALL __GETW1P
000310 87ea      	STD  Y+10,R30
000311 87fb      	STD  Y+10+1,R31
                 _0x2040046:
                 _0x2040036:
000312 fd00      	SBRC R16,0
000313 c015      	RJMP _0x2040047
                 _0x2040048:
000314 1715      	CP   R17,R21
000315 f498      	BRSH _0x204004A
000316 ff07      	SBRS R16,7
000317 c008      	RJMP _0x204004B
000318 ff02      	SBRS R16,2
000319 c004      	RJMP _0x204004C
00031a 7f0b      	ANDI R16,LOW(251)
00031b 2f24      	MOV  R18,R20
00031c 5011      	SUBI R17,LOW(1)
00031d c001      	RJMP _0x204004D
                 _0x204004C:
00031e e320      	LDI  R18,LOW(48)
                 _0x204004D:
00031f c001      	RJMP _0x204004E
                 _0x204004B:
000320 e220      	LDI  R18,LOW(32)
                 _0x204004E:
000321 932a      	ST   -Y,R18
000322 85ad      	LDD  R26,Y+13
000323 85be      	LDD  R27,Y+13+1
000324 85ef      	LDD  R30,Y+15
000325 89f8      	LDD  R31,Y+15+1
000326 9509      	ICALL
000327 5051      	SUBI R21,LOW(1)
000328 cfeb      	RJMP _0x2040048
                 _0x204004A:
                 _0x2040047:
000329 2f31      	MOV  R19,R17
00032a ff01      	SBRS R16,1
00032b c01b      	RJMP _0x204004F
                 _0x2040050:
00032c 3030      	CPI  R19,0
00032d f0c1      	BREQ _0x2040052
00032e ff03      	SBRS R16,3
00032f c006      	RJMP _0x2040053
000330 81ee      	LDD  R30,Y+6
000331 81ff      	LDD  R31,Y+6+1
000332 9125      	LPM  R18,Z+
000333 83ee      	STD  Y+6,R30
000334 83ff      	STD  Y+6+1,R31
000335 c005      	RJMP _0x2040054
                 _0x2040053:
000336 81ae      	LDD  R26,Y+6
000337 81bf      	LDD  R27,Y+6+1
000338 912d      	LD   R18,X+
000339 83ae      	STD  Y+6,R26
00033a 83bf      	STD  Y+6+1,R27
                 _0x2040054:
00033b 932a      	ST   -Y,R18
00033c 85ad      	LDD  R26,Y+13
00033d 85be      	LDD  R27,Y+13+1
00033e 85ef      	LDD  R30,Y+15
00033f 89f8      	LDD  R31,Y+15+1
000340 9509      	ICALL
000341 3050      	CPI  R21,0
000342 f009      	BREQ _0x2040055
000343 5051      	SUBI R21,LOW(1)
                 _0x2040055:
000344 5031      	SUBI R19,LOW(1)
000345 cfe6      	RJMP _0x2040050
                 _0x2040052:
000346 c051      	RJMP _0x2040056
                 _0x204004F:
                 _0x2040058:
000347 e320      	LDI  R18,LOW(48)
000348 81ee      	LDD  R30,Y+6
000349 81ff      	LDD  R31,Y+6+1
00034a d0e8      	RCALL __GETW1PF
00034b 87e8      	STD  Y+8,R30
00034c 87f9      	STD  Y+8+1,R31
00034d 81ee      	LDD  R30,Y+6
00034e 81ff      	LDD  R31,Y+6+1
00034f 9632      	ADIW R30,2
000350 83ee      	STD  Y+6,R30
000351 83ff      	STD  Y+6+1,R31
                 _0x204005A:
000352 85e8      	LDD  R30,Y+8
000353 85f9      	LDD  R31,Y+8+1
000354 85aa      	LDD  R26,Y+10
000355 85bb      	LDD  R27,Y+10+1
000356 17ae      	CP   R26,R30
000357 07bf      	CPC  R27,R31
000358 f050      	BRLO _0x204005C
000359 5f2f      	SUBI R18,-LOW(1)
00035a 85a8      	LDD  R26,Y+8
00035b 85b9      	LDD  R27,Y+8+1
00035c 85ea      	LDD  R30,Y+10
00035d 85fb      	LDD  R31,Y+10+1
00035e 1bea      	SUB  R30,R26
00035f 0bfb      	SBC  R31,R27
000360 87ea      	STD  Y+10,R30
000361 87fb      	STD  Y+10+1,R31
000362 cfef      	RJMP _0x204005A
                 _0x204005C:
000363 332a      	CPI  R18,58
000364 f028      	BRLO _0x204005D
000365 ff03      	SBRS R16,3
000366 c002      	RJMP _0x204005E
000367 5f29      	SUBI R18,-LOW(7)
000368 c001      	RJMP _0x204005F
                 _0x204005E:
000369 5d29      	SUBI R18,-LOW(39)
                 _0x204005F:
                 _0x204005D:
00036a fd04      	SBRC R16,4
00036b c01d      	RJMP _0x2040061
00036c 3321      	CPI  R18,49
00036d f420      	BRSH _0x2040063
00036e 85a8      	LDD  R26,Y+8
00036f 85b9      	LDD  R27,Y+8+1
000370 9711      	SBIW R26,1
000371 f409      	BRNE _0x2040062
                 _0x2040063:
000372 c009      	RJMP _0x20400CD
                 _0x2040062:
000373 1753      	CP   R21,R19
000374 f010      	BRLO _0x2040067
000375 ff00      	SBRS R16,0
000376 c001      	RJMP _0x2040068
                 _0x2040067:
000377 c01a      	RJMP _0x2040066
                 _0x2040068:
000378 e220      	LDI  R18,LOW(32)
000379 ff07      	SBRS R16,7
00037a c00e      	RJMP _0x2040069
00037b e320      	LDI  R18,LOW(48)
                 _0x20400CD:
00037c 6100      	ORI  R16,LOW(16)
00037d ff02      	SBRS R16,2
00037e c00a      	RJMP _0x204006A
00037f 7f0b      	ANDI R16,LOW(251)
000380 934a      	ST   -Y,R20
000381 85ad      	LDD  R26,Y+13
000382 85be      	LDD  R27,Y+13+1
000383 85ef      	LDD  R30,Y+15
000384 89f8      	LDD  R31,Y+15+1
000385 9509      	ICALL
000386 3050      	CPI  R21,0
000387 f009      	BREQ _0x204006B
000388 5051      	SUBI R21,LOW(1)
                 _0x204006B:
                 _0x204006A:
                 _0x2040069:
                 _0x2040061:
000389 932a      	ST   -Y,R18
00038a 85ad      	LDD  R26,Y+13
00038b 85be      	LDD  R27,Y+13+1
00038c 85ef      	LDD  R30,Y+15
00038d 89f8      	LDD  R31,Y+15+1
00038e 9509      	ICALL
00038f 3050      	CPI  R21,0
000390 f009      	BREQ _0x204006C
000391 5051      	SUBI R21,LOW(1)
                 _0x204006C:
                 _0x2040066:
000392 5031      	SUBI R19,LOW(1)
000393 85a8      	LDD  R26,Y+8
000394 85b9      	LDD  R27,Y+8+1
000395 9712      	SBIW R26,2
000396 f008      	BRLO _0x2040059
000397 cfaf      	RJMP _0x2040058
                 _0x2040059:
                 _0x2040056:
000398 ff00      	SBRS R16,0
000399 c00b      	RJMP _0x204006D
                 _0x204006E:
00039a 3050      	CPI  R21,0
00039b f049      	BREQ _0x2040070
00039c 5051      	SUBI R21,LOW(1)
00039d e2e0      	LDI  R30,LOW(32)
00039e 93ea      	ST   -Y,R30
00039f 85ad      	LDD  R26,Y+13
0003a0 85be      	LDD  R27,Y+13+1
0003a1 85ef      	LDD  R30,Y+15
0003a2 89f8      	LDD  R31,Y+15+1
0003a3 9509      	ICALL
0003a4 cff5      	RJMP _0x204006E
                 _0x2040070:
                 _0x204006D:
                 _0x2040071:
                 _0x2040030:
                 _0x20400CC:
0003a5 e010      	LDI  R17,LOW(0)
                 _0x204001B:
0003a6 cea5      	RJMP _0x2040016
                 _0x2040018:
0003a7 85ac      	LDD  R26,Y+12
0003a8 85bd      	LDD  R27,Y+12+1
0003a9 91ed      	LD   R30,X+
0003aa 91fd      	LD   R31,X+
0003ab d053      	RCALL __LOADLOCR6
0003ac 9664      	ADIW R28,20
0003ad 9508      	RET
                 ; .FEND
                 _put_lcd_G102:
                 ; .FSTART _put_lcd_G102
0003ae d04b      	RCALL __SAVELOCR4
0003af 018d      	MOVW R16,R26
0003b0 813c      	LDD  R19,Y+4
0003b1 2fa3      	MOV  R26,R19
0003b2 de38      	RCALL _lcd_putchar
0003b3 01d8      	MOVW R26,R16
0003b4 91ed      	LD   R30,X+
0003b5 91fd      	LD   R31,X+
0003b6 9631      	ADIW R30,1
0003b7 93fe      	ST   -X,R31
0003b8 93ee      	ST   -X,R30
0003b9 d047      	RCALL __LOADLOCR4
0003ba 9625      	ADIW R28,5
0003bb 9508      	RET
                 ; .FEND
                 _lcd_printf:
                 ; .FSTART _lcd_printf
0003bc 92ff      	PUSH R15
0003bd 2ef8      	MOV  R15,R24
0003be 9726      	SBIW R28,6
0003bf 931a      	ST   -Y,R17
0003c0 930a      	ST   -Y,R16
0003c1 01de      	MOVW R26,R28
0003c2 9614      	ADIW R26,4
0003c3 d042      	RCALL __ADDW2R15
0003c4 018d      	MOVW R16,R26
0003c5 e0e0      	LDI  R30,LOW(0)
0003c6 83ec      	STD  Y+4,R30
0003c7 83ed      	STD  Y+4+1,R30
0003c8 83ee      	STD  Y+6,R30
0003c9 83ef      	STD  Y+6+1,R30
0003ca 01de      	MOVW R26,R28
0003cb 9618      	ADIW R26,8
0003cc d039      	RCALL __ADDW2R15
0003cd 91ed      	LD   R30,X+
0003ce 91fd      	LD   R31,X+
0003cf 93fa      	ST   -Y,R31
0003d0 93ea      	ST   -Y,R30
0003d1 931a      	ST   -Y,R17
0003d2 930a      	ST   -Y,R16
0003d3 eaee      	LDI  R30,LOW(_put_lcd_G102)
0003d4 e0f3      	LDI  R31,HIGH(_put_lcd_G102)
0003d5 93fa      	ST   -Y,R31
0003d6 93ea      	ST   -Y,R30
0003d7 01de      	MOVW R26,R28
0003d8 9618      	ADIW R26,8
0003d9 de67      	RCALL __print_G102
0003da 8119      	LDD  R17,Y+1
0003db 8108      	LDD  R16,Y+0
0003dc 9628      	ADIW R28,8
0003dd 90ff      	POP  R15
0003de 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0003df 93ba      	ST   -Y,R27
0003e0 93aa      	ST   -Y,R26
0003e1 91a9          ld   r26,y+
0003e2 91b9          ld   r27,y+
0003e3 27ee          clr  r30
0003e4 27ff          clr  r31
                 strlen0:
0003e5 916d          ld   r22,x+
0003e6 2366          tst  r22
0003e7 f011          breq strlen1
0003e8 9631          adiw r30,1
0003e9 cffb          rjmp strlen0
                 strlen1:
0003ea 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0003eb 93ba      	ST   -Y,R27
0003ec 93aa      	ST   -Y,R26
0003ed 27aa          clr  r26
0003ee 27bb          clr  r27
0003ef 91e9          ld   r30,y+
0003f0 91f9          ld   r31,y+
                 strlenf0:
0003f1 9005      	lpm  r0,z+
0003f2 2000          tst  r0
0003f3 f011          breq strlenf1
0003f4 9611          adiw r26,1
0003f5 cffb          rjmp strlenf0
                 strlenf1:
0003f6 01fd          movw r30,r26
0003f7 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G100:
000160           	.BYTE 0x4
                 __lcd_x:
000164           	.BYTE 0x1
                 __lcd_y:
000165           	.BYTE 0x1
                 __lcd_maxx:
000166           	.BYTE 0x1
                 __seed_G103:
000167           	.BYTE 0x4
                 
                 	.CSEG
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
0003f8 935a      	ST   -Y,R21
                 __SAVELOCR5:
0003f9 934a      	ST   -Y,R20
                 __SAVELOCR4:
0003fa 933a      	ST   -Y,R19
                 __SAVELOCR3:
0003fb 932a      	ST   -Y,R18
                 __SAVELOCR2:
0003fc 931a      	ST   -Y,R17
0003fd 930a      	ST   -Y,R16
0003fe 9508      	RET
                 
                 __LOADLOCR6:
0003ff 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000400 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000401 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000402 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000403 8119      	LDD  R17,Y+1
000404 8108      	LD   R16,Y
000405 9508      	RET
                 
                 __ADDW2R15:
000406 2400      	CLR  R0
000407 0daf      	ADD  R26,R15
000408 1db0      	ADC  R27,R0
000409 9508      	RET
                 
                 __ANEGW1:
00040a 95f1      	NEG  R31
00040b 95e1      	NEG  R30
00040c 40f0      	SBCI R31,0
00040d 9508      	RET
                 
                 __DIVW21U:
00040e 2400      	CLR  R0
00040f 2411      	CLR  R1
000410 e190      	LDI  R25,16
                 __DIVW21U1:
000411 0faa      	LSL  R26
000412 1fbb      	ROL  R27
000413 1c00      	ROL  R0
000414 1c11      	ROL  R1
000415 1a0e      	SUB  R0,R30
000416 0a1f      	SBC  R1,R31
000417 f418      	BRCC __DIVW21U2
000418 0e0e      	ADD  R0,R30
000419 1e1f      	ADC  R1,R31
00041a c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00041b 60a1      	SBR  R26,1
                 __DIVW21U3:
00041c 959a      	DEC  R25
00041d f799      	BRNE __DIVW21U1
00041e 01fd      	MOVW R30,R26
00041f 01d0      	MOVW R26,R0
000420 9508      	RET
                 
                 __MODW21:
000421 94e8      	CLT
000422 ffb7      	SBRS R27,7
000423 c004      	RJMP __MODW211
000424 95b1      	NEG  R27
000425 95a1      	NEG  R26
000426 40b0      	SBCI R27,0
000427 9468      	SET
                 __MODW211:
000428 fdf7      	SBRC R31,7
000429 dfe0      	RCALL __ANEGW1
00042a dfe3      	RCALL __DIVW21U
00042b 01fd      	MOVW R30,R26
00042c f40e      	BRTC __MODW212
00042d dfdc      	RCALL __ANEGW1
                 __MODW212:
00042e 9508      	RET
                 
                 __GETW1P:
00042f 91ed      	LD   R30,X+
000430 91fc      	LD   R31,X
000431 9711      	SBIW R26,1
000432 9508      	RET
                 
                 __GETW1PF:
000433 9005      	LPM  R0,Z+
000434 91f4      	LPM  R31,Z
000435 2de0      	MOV  R30,R0
000436 9508      	RET
                 
                 __PUTPARD1:
000437 937a      	ST   -Y,R23
000438 936a      	ST   -Y,R22
000439 93fa      	ST   -Y,R31
00043a 93ea      	ST   -Y,R30
00043b 9508      	RET
                 
                 _delay_ms:
00043c 9610      	adiw r26,0
00043d f039      	breq __delay_ms1
                 __delay_ms0:
00043e 95a8      	wdr
                +
00043f ee88     +LDI R24 , LOW ( 0x3E8 )
000440 e093     +LDI R25 , HIGH ( 0x3E8 )
                +__DELAY_USW_LOOP :
000441 9701     +SBIW R24 , 1
000442 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x3E8
000443 9711      	sbiw r26,1
000444 f7c9      	brne __delay_ms0
                 __delay_ms1:
000445 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  16 r1 :   5 r2 :   0 r3 :   0 r4 :   4 r5 :   5 r6 :  13 r7 :   2 
r8 :   0 r9 :  12 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  37 r17:  44 r18:  31 r19:  10 r20:   9 r21:  17 r22:  10 r23:   6 
r24:  30 r25:   5 r26: 103 r27:  42 r28:  15 r29:   1 r30: 279 r31:  81 
x  :  23 y  : 205 z  :  14 
Registers used: 27 out of 35 (77.1%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   4 
adiw  :  22 and   :   0 andi  :   8 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  14 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  22 
brlt  :   0 brmi  :   0 brne  :  35 brpl  :   1 brsh  :  10 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :  26 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  27 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   0 
cp    :  24 cpc   :   1 cpi   :  34 cpse  :   0 dec   :  11 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   8 ijmp  :   0 
in    :  18 inc   :   4 jmp   :  22 ld    :  32 ldd   :  93 ldi   : 128 
lds   :   4 lpm   :  14 lsl   :   2 lsr   :   0 mov   :  33 movw  :  13 
mul   :   1 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   1 
ori   :  14 out   :  25 pop   :   1 push  :   1 rcall :  58 ret   :  22 
reti  :   3 rjmp  :  70 rol   :   3 ror   :   0 sbc   :   2 sbci  :   3 
sbi   :  22 sbic  :   0 sbis  :   1 sbiw  :  17 sbr   :   1 sbrc  :   3 
sbrs  :  11 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  65 std   :  40 sts   :   9 sub   :   2 subi  :  18 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 61 out of 116 (52.6%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00088c   2108     80   2188   16384  13.4%
[.dseg] 0x000060 0x00016b      0     11     11    1024   1.1%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 8 warnings
